
user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /root/huyifeng/thunder-trader/monitor;
            index  index.html index.htm;
        }

        location /thunder-trader{
            default_type application/json;
            content_by_lua '
                local bit = require("bit")
                local thunder_trader_ip = "127.0.0.1"
                local thunder_trader_port = 8800
                if "POST" ~= ngx.var.request_method then
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
                
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                if body == nil then
                    local file_name = ngx.req.get_body_file()
                    if file_name then
                        body= getFile(file_name)
                    else
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                end
                
                local sock = ngx.socket.tcp()
                local ok,err = sock:connect(thunder_trader_ip, thunder_trader_port)
                if not ok then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
                sock:settimeout(5000)
                len = string.len(body) + 4
                h0 = bit.band(len, 0xff)
                h1 = bit.rshift(bit.band(len, 0xff00), 8)
                h2 = bit.rshift(bit.band(len, 0xff0000), 16)
                h3 = bit.rshift(bit.band(len, 0xff000000), 24)
                buffer_tobe_send = string.char(h0,h1,h2,h3)..body
                
                local ok, err = sock:send(buffer_tobe_send)
                if not ok then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
                
                local response_head, err, partial = sock:receive(4)
                if not response_head then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                
                h0 = string.byte(string.sub(response_head, 1,1))
                h1 = string.byte(string.sub(response_head, 2,2))
                h2 = string.byte(string.sub(response_head, 3,3))
                h3 = string.byte(string.sub(response_head, 4,4))
                
                ret_len = h0 + bit.lshift(h1, 8) + bit.lshift(h2, 16) + bit.lshift(h3, 24)
                if ret_len < 0 then
                    ngx.log(ngx.ERR, "Response len > MAX_LEN")
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
                local response_body, err, partial = sock:receive(ret_len - 4)
                if not err then
                    ngx.say(response_body)
                else
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
                sock:close()
            ';
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

